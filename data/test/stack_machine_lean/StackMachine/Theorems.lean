import Mathlib
import StackMachine.Basic
open BigOperators

open StackMachine

--- these theorems are generated by gpt-5-mini

-- 1) append lemma for run_program
theorem run_program_append (map : Var → Nat) (s : List ProgResult) (p q : Program) :
  run_program map s (p ++ q) = run_program map (run_program map s p) q := by
    -- proof: generated by COPRA using gpt-5-mini
    induction p generalizing s
    simp [run_program]
    rename_i head tail tail_ih
    apply tail_ih


-- 2) main correctness lemma (generalized to arbitrary initial stack `s`)
theorem compile_preserves_stack (map : Var → Nat) (e : Expr) (s : List ProgResult) :
  run_program map s (compile e) = ProgResult.ok (eval map e) :: s := by
    -- proof: generated by COPRA using gpt-5-mini
    induction' e generalizing s
    rename_i a
    simp [compile, run_program, run_instr, eval]
    rfl
    rename_i a1 a2 a_ih1 a_ih2
    simp [compile, run_program, run_instr, eval]
    rw [run_program_append]
    specialize a_ih2 (run_program map s (compile a1))
    rw [run_program_append]
    rw [a_ih2]
    simp [run_program, run_instr]
    rw [a_ih1]
    rw [Nat.add_comm]

-- 3) final theorem follows from (2) with s := []
theorem compile_correct (map : Var → Nat) (e : Expr) :
  run map (compile e) = ProgResult.ok (eval map e) := by
  -- proof: generated by COPRA using gpt-5-mini
    simp [compile_preserves_stack, run]
